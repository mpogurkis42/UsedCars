source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
y <- c(19.2,16.9,11.6,17.0,12.4,10.5,8.1,11.3,7.9,18.9,17.3,15.2,15.2,14.2,21.6,27.6)
# Calculate mean and standard deviation for each dataset
mean_x <- mean(x)
mean_y <- mean(y)
sd_x <- sd(x)
sd_y <- sd(y)
# Perform paired t-test
result <- t.test(x, y, paired = TRUE)
# Calculate the critical value for a 95% confidence interval
critical_value <- qt(0.975, df = length(x) - 1)
# Print the results
cat("Mean of x:", mean_x, "\n")
cat("Mean of y:", mean_y, "\n")
cat("Standard Deviation of x:", sd_x, "\n")
cat("Standard Deviation of y:", sd_y, "\n")
cat("Paired t-test results:\n")
print(result)
cat("Critical Value for 95% Confidence Interval:", critical_value, "\n")
y <- c(13.5,13.7,15.0,15.1,12.2,13.9,14.8,16.2,12.9,15.1,17.6,28.2)
# Calculate mean and standard deviation for each dataset
mean_x <- mean(x)
mean_y <- mean(y)
sd_x <- sd(x)
sd_y <- sd(y)
# Perform paired t-test
result <- t.test(x, y, paired = TRUE)
# Calculate the critical value for a 95% confidence interval
critical_value <- qt(0.975, df = length(x) - 1)
# Print the results
cat("Mean of x:", mean_x, "\n")
cat("Mean of y:", mean_y, "\n")
cat("Standard Deviation of x:", sd_x, "\n")
cat("Standard Deviation of y:", sd_y, "\n")
cat("Paired t-test results:\n")
print(result)
cat("Critical Value for 95% Confidence Interval:", critical_value, "\n")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
#
# Detach data
#
detach(Data)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
View(Data)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
View(Data)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
detach(TumorData)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
attach(TumorData)
#
# variable names and summary statistics
#
summary(TumorData)
sapply(TumorData, sd)
#
# Linear regression with the covariate tumorwgt
#
plot(radioact, tumorwgt, main="Radioactivity against tumor weight")
outcome <- lm(tumorwgt ~ radioact)
abline(outcome, col="red")
summary(outcome)
confint(outcome, level=0.95)
plot(fitted(outcome),rstandard(outcome),main="Fitted versus standardized residual")
abline(0,0,lty=2)
#
# Confidence interval for the new value on radioact
#
NewData <- data.frame(radioact=c(8))
outcome <- lm(tumorwgt ~ radioact)
predict(outcome, NewData, interval="confidence", level=0.95)
detach(TumorData)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
View(model_thigh)
View(model_midarm)
View(model_thigh)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
probs = matrix(c(11, 99, 3, 887), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE")))
View(data)
probs
probs
probs
probs = matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE")))
probs
probs
rowSums(probs)
probs
probs = matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE"), c("ROW-TOTAL","COL-TOTAL")))
probs = addmargins(matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE"),)))
probs = addmargins(matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE"))))
probs
library(MASS)
data(cats)
head(cats)
View(cats)
plot(heart-weight,body-weight)
View(cats)
plot(bwt,hwt)
head(cats)
plot(bwt,hwt)
plot(Bwt,Hwt)
View(data)
View(model_midarm)
View(model_midarm)
View(cats)
plot(cats(Bwt),cats(Hwt))
plot(cats)
plot(cats.Bwt,cats.Hwt)
plot(cats.bwt,cats.Hwt)
plot(cats$Bwt,cats$Hwt)
par(mar=c(1,1,1,1))
plot(cats$Bwt,cats$Hwt)
plot
plot.new(cats$Bwt,cats$Hwt)
plot(cats$Bwt,cats$Hwt)
abline()
abline(a, b, untf = FALSE, \dots)
abline(cats$Bwt, cats$Hwt, untf = FALSE, \dots)
abline(a=cats$Bwt, b=cats$Hwt, untf = FALSE, \dots)
abline(a=cats$Bwt, b=cats$Hwt)
abline(a=cats$Bwt[1], b=cats$Hwt[2])
abline(a=cats$Bwt[0], b=cats$Hwt[1])
abline(a=cats$Bwt[1], b=cats$Hwt[2])
abline(a=coef(cats$Bwt)[1], b=coef(cats$Hwt)[2])
boxplot(cats$Sex,cats$Hwt)
boxplot(cats$Hwt,cats$Sex)
load("C:/Users/matto/Downloads/OA 2.2 - USArrests.csv")
OA.2.2...USArrests <- read.csv("C:/Users/matto/Downloads/OA 2.2 - USArrests.csv")
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
head(OA.2.2...USArrests)
mean(OA.2.2...USArrests)
mean(OA.2.2...USArrests$Murder)
mean(OA.2.2...USArrests$UrbanPop)
mean(OA.2.2...USArrests$Murder)
mean(OA.2.2...USArrests$Assault)
mean(OA.2.2...USArrests$UrbanPop)
mean(OA.2.2...USArrests$Assault, na.rm = TRUE)
USArrests$Assault <- replace(USArrests$Assault, is.na(USArrests$Assault), 182.1837)
USArrests$Assault
newAssault
newAssault <- replace(USArrests$Assault, is.na(USArrests$Assault), 182.1837)
newAssault
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
USArrests$Assault <- replace(USArrests$Assault, is.na(USArrests$Assault), 182.1837)
head(USArrests$Assault)
View(USArrests)
View(OA.2.2...USArrests)
View(USArrests)
View(OA.2.2...USArrests)
OA.2.2...USArrests$Assault <- replace(OA.2.2...USArrests$Assault, is.na(OA.2.2...USArrests$Assault), 182.1837)
head(USArrests$Assault)
View(OA.2.2...USArrests)
head(oa.2.2...USArrests$Assault)
head(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests)
boxplot(OA.2.2...USArrests$Murder, OA.2.2...USArrests$Assault, OA.2.2...USArrests$UrbanPop)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
summary(OA.2.2...USArrests)
assaultMean <- mean(OA.2.2...USArrests$Assault, na.rm = TRUE)
assaultMean
boxplot(OA.2.2...USArrests$Assault)
OA.2.2...USArrests$Assault <- ifelse(OA.2.2...USArrests$Assault > 400, assaultMean, OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
OA.2.2...USArrests$UrbanPop <- ifelse(OA.2.2...USArrests$UrbanPop < 10, urbanMean, OA.2.2...USArrests$Assault)
urbanMean <- mean(OA.2.2...USArrests$UrbanPop)
urbanMean
OA.2.2...USArrests$UrbanPop <- ifelse(OA.2.2...USArrests$UrbanPop < 10, urbanMean, OA.2.2...USArrests$Assault)
OA.2.2...USArrests$urbanPop <- ifelse(OA.2.2...USArrests$UrbanPop > 400, urbanMean, OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$urbanPop)
OA.2.2...USArrests <- OA.2.2...USArrests %>%
mutate(UrbanPopCategory = case_when(
UrbanPop < 50 ~ "Small",
UrbanPop < 60 ~ "Medium",
UrbanPop < 70 ~ "Large",
UrbanPop >= 70 ~ "Extra-Large"
))
load("C:/Users/matto/OneDrive/Desktop/data science/Lab 4/us-states.csv")
View(USArrests)
View(OA.2.2...USArrests)
data <- read.csv("us-states.csv")
us.states <- read.csv("C:/Users/matto/OneDrive/Desktop/data science/Lab 4/us-states.csv")
View(us.states)
View(USArrests)
data <- read.csv("us-states.csv")
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
data <- read.csv("us-states.csv")
data
data <- read.csv("us-states.csv")
data
data <- read.csv("us-states.csv")
data
load("C:/Users/matto/OneDrive/Desktop/Data science project/train.csv")
data
#loading the data set
data <- read_csv("train.csv")
data
library(readxl)
train <- read_excel("C:/Users/matto/OneDrive/Desktop/Data science project/train.csv")
setwd("C:/Users/matto/OneDrive/Desktop/Data science project")
#loading the data set
data <- read_csv("train.csv")
data
#loading libraries
library(dplyr)
library(ggplot2)
library(corrplot)
library(tidyr)
library(readr)
#loading the data set
data <- read_csv("train.csv")
data
View(data)
View(data)
str(data)
#summary of the data
summary(data)
#looking for missing values
colSums(is.na(data))
#loading libraries
library(dplyr)
library(ggplot2)
library(corrplot)
library(tidyr)
library(readr)
library(stringr)
#loading the data set
data <- read_csv("train.csv")
#summary of the data
summary(data)
#looking for missing values
colSums(is.na(data))
#data cleaning
#converting character columns to factors
data >- data %>%
mutate(across(where(is.character), as.factor))
#Handling missing values
#function to replace NAs with the column's mean
replace_na_number <- function(x){
if(is.numeric(x)){
x[is.na(x)] <- mean(x, na.rm = TRUE)
}
return(x)
}
#function to clean up the NAs in the categorical columns using the mode
replace_na_categorical <- function(x){
if(is.factor(x)){
mode_value <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_value
}
return(x)
}
#applying my cleaning functions here
data <- data %>%
mutate(across(where(is.numeric), replace_na_numeric)) %>%
mutate(across(where(is.factor), replace_na_categorical))
#data cleaning
#converting character columns to factors
data <- data %>%
mutate(across(where(is.character), as.factor))
#Handling missing values
#function to replace NAs with the column's mean
replace_na_number <- function(x){
if(is.numeric(x)){
x[is.na(x)] <- mean(x, na.rm = TRUE)
}
return(x)
}
#function to clean up the NAs in the categorical columns using the mode
replace_na_categorical <- function(x){
if(is.factor(x)){
mode_value <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_value
}
return(x)
}
#applying my cleaning functions here
data <- data %>%
mutate(across(where(is.numeric), replace_na_numeric)) %>%
mutate(across(where(is.factor), replace_na_categorical))
# Step 1: Loading the dataset
data <- read_csv("train.csv")
# Step 2: Summary of the data
summary(data)
# Step 3: Checking for missing values
cat("Missing values in each column:\n")
print(colSums(is.na(data)))
# Step 4: Data Cleaning
# Converting character columns to factors
data <- data %>%
mutate(across(where(is.character), as.factor))
# Function to replace NAs in numeric columns with the mean
replace_na_number <- function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
}
return(x)
}
# Function to replace NAs in categorical columns with the mode
replace_na_categorical <- function(x) {
if (is.factor(x)) {
mode_value <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_value
}
return(x)
}
# Applying the cleaning functions
data <- data %>%
mutate(across(where(is.numeric), replace_na_number)) %>%
mutate(across(where(is.factor), replace_na_categorical))
# Step 6: Verifying the cleaned data
cat("\nData after cleaning:\n")
summary(data)
# Step 7: Checking for remaining missing values
cat("\nMissing values after cleaning:\n")
print(colSums(is.na(data)))
summary(data)
# Histogram of 'price'
ggplot(data, aes(x = price)) +
geom_histogram(bins = 50, fill = "skyblue", color = "black") +
labs(title = "Distribution of Car Prices", x = "Price", y = "Count")
# Histogram of 'milage'
ggplot(data, aes(x = milage)) +
geom_histogram(bins = 50, fill = "lightgreen", color = "black") +
labs(title = "Distribution of Mileage", x = "Mileage", y = "Count")
# Histogram of 'model_year'
ggplot(data, aes(x = model_year)) +
geom_histogram(bins = 30, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Model Year", x = "Model Year", y = "Count")
# Histogram of 'price'
ggplot(data, aes(x = price)) +
geom_histogram(bins = 50, fill = "skyblue", color = "black") +
labs(title = "Distribution of Car Prices", x = "Price", y = "Count")
# Count plot of 'brand'
ggplot(data, aes(x = reorder(brand, brand, function(x) -length(x)))) +
geom_bar(fill = "steelblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Count of Cars by Brand", x = "Brand", y = "Count")
# Count plot of 'fuel_type'
ggplot(data, aes(x = fuel_type)) +
geom_bar(fill = "purple") +
labs(title = "Count of Cars by Fuel Type", x = "Fuel Type", y = "Count")
# Count plot of 'accident' status
ggplot(data, aes(x = accident)) +
geom_bar(fill = "orange") +
labs(title = "Accident Reported Status", x = "Accident", y = "Count")
# Count plot of 'clean_title'
ggplot(data, aes(x = clean_title)) +
geom_bar(fill = "brown") +
labs(title = "Clean Title Status", x = "Clean Title", y = "Count")
#boxplots
# Boxplot of price by brand
ggplot(data, aes(x = reorder(brand, price, median), y = price)) +
geom_boxplot(fill = "lightblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplot of Car Prices by Brand", x = "Brand", y = "Price")
# Boxplot of price by fuel type
ggplot(data, aes(x = fuel_type, y = price)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Boxplot of Car Prices by Fuel Type", x = "Fuel Type", y = "Price")
# Boxplot of price by transmission type
ggplot(data, aes(x = transmission, y = price)) +
geom_boxplot(fill = "lightpink") +
labs(title = "Boxplot of Car Prices by Transmission", x = "Transmission", y = "Price")
# Select numerical columns for correlation analysis
numeric_cols <- data %>%
select(model_year, milage, horsepower, cylinders, price)
# Compute correlation matrix
cor_matrix <- cor(numeric_cols, use = "complete.obs")
# Plot correlation matrix
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)

source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
detach(TumorData)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
attach(TumorData)
#
# variable names and summary statistics
#
summary(TumorData)
sapply(TumorData, sd)
#
# Linear regression with the covariate tumorwgt
#
plot(radioact, tumorwgt, main="Radioactivity against tumor weight")
outcome <- lm(tumorwgt ~ radioact)
abline(outcome, col="red")
summary(outcome)
confint(outcome, level=0.95)
plot(fitted(outcome),rstandard(outcome),main="Fitted versus standardized residual")
abline(0,0,lty=2)
#
# Confidence interval for the new value on radioact
#
NewData <- data.frame(radioact=c(8))
outcome <- lm(tumorwgt ~ radioact)
predict(outcome, NewData, interval="confidence", level=0.95)
detach(TumorData)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
View(model_thigh)
View(model_midarm)
View(model_thigh)
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
source("C:/Users/matto/OneDrive/Desktop/lab/a.R")
probs = matrix(c(11, 99, 3, 887), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE")))
View(data)
probs
probs
probs
probs = matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE")))
probs
probs
rowSums(probs)
probs
probs = matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE"), c("ROW-TOTAL","COL-TOTAL")))
probs = addmargins(matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE"),)))
probs = addmargins(matrix(c(11, 14, 3, 972), 2, 2, byrow = TRUE, dimnames = list(c("M-True", "M-False"),c("C-TRUE", "C-FALSE"))))
probs
library(MASS)
data(cats)
head(cats)
View(cats)
plot(heart-weight,body-weight)
View(cats)
plot(bwt,hwt)
head(cats)
plot(bwt,hwt)
plot(Bwt,Hwt)
View(data)
View(model_midarm)
View(model_midarm)
View(cats)
plot(cats(Bwt),cats(Hwt))
plot(cats)
plot(cats.Bwt,cats.Hwt)
plot(cats.bwt,cats.Hwt)
plot(cats$Bwt,cats$Hwt)
par(mar=c(1,1,1,1))
plot(cats$Bwt,cats$Hwt)
plot
plot.new(cats$Bwt,cats$Hwt)
plot(cats$Bwt,cats$Hwt)
abline()
abline(a, b, untf = FALSE, \dots)
abline(cats$Bwt, cats$Hwt, untf = FALSE, \dots)
abline(a=cats$Bwt, b=cats$Hwt, untf = FALSE, \dots)
abline(a=cats$Bwt, b=cats$Hwt)
abline(a=cats$Bwt[1], b=cats$Hwt[2])
abline(a=cats$Bwt[0], b=cats$Hwt[1])
abline(a=cats$Bwt[1], b=cats$Hwt[2])
abline(a=coef(cats$Bwt)[1], b=coef(cats$Hwt)[2])
boxplot(cats$Sex,cats$Hwt)
boxplot(cats$Hwt,cats$Sex)
load("C:/Users/matto/Downloads/OA 2.2 - USArrests.csv")
OA.2.2...USArrests <- read.csv("C:/Users/matto/Downloads/OA 2.2 - USArrests.csv")
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
head(OA.2.2...USArrests)
mean(OA.2.2...USArrests)
mean(OA.2.2...USArrests$Murder)
mean(OA.2.2...USArrests$UrbanPop)
mean(OA.2.2...USArrests$Murder)
mean(OA.2.2...USArrests$Assault)
mean(OA.2.2...USArrests$UrbanPop)
mean(OA.2.2...USArrests$Assault, na.rm = TRUE)
USArrests$Assault <- replace(USArrests$Assault, is.na(USArrests$Assault), 182.1837)
USArrests$Assault
newAssault
newAssault <- replace(USArrests$Assault, is.na(USArrests$Assault), 182.1837)
newAssault
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
USArrests$Assault <- replace(USArrests$Assault, is.na(USArrests$Assault), 182.1837)
head(USArrests$Assault)
View(USArrests)
View(OA.2.2...USArrests)
View(USArrests)
View(OA.2.2...USArrests)
OA.2.2...USArrests$Assault <- replace(OA.2.2...USArrests$Assault, is.na(OA.2.2...USArrests$Assault), 182.1837)
head(USArrests$Assault)
View(OA.2.2...USArrests)
head(oa.2.2...USArrests$Assault)
head(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests)
boxplot(OA.2.2...USArrests$Murder, OA.2.2...USArrests$Assault, OA.2.2...USArrests$UrbanPop)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Murder)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
summary(OA.2.2...USArrests)
assaultMean <- mean(OA.2.2...USArrests$Assault, na.rm = TRUE)
assaultMean
boxplot(OA.2.2...USArrests$Assault)
OA.2.2...USArrests$Assault <- ifelse(OA.2.2...USArrests$Assault > 400, assaultMean, OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$UrbanPop)
OA.2.2...USArrests$UrbanPop <- ifelse(OA.2.2...USArrests$UrbanPop < 10, urbanMean, OA.2.2...USArrests$Assault)
urbanMean <- mean(OA.2.2...USArrests$UrbanPop)
urbanMean
OA.2.2...USArrests$UrbanPop <- ifelse(OA.2.2...USArrests$UrbanPop < 10, urbanMean, OA.2.2...USArrests$Assault)
OA.2.2...USArrests$urbanPop <- ifelse(OA.2.2...USArrests$UrbanPop > 400, urbanMean, OA.2.2...USArrests$Assault)
boxplot(OA.2.2...USArrests$urbanPop)
OA.2.2...USArrests <- OA.2.2...USArrests %>%
mutate(UrbanPopCategory = case_when(
UrbanPop < 50 ~ "Small",
UrbanPop < 60 ~ "Medium",
UrbanPop < 70 ~ "Large",
UrbanPop >= 70 ~ "Extra-Large"
))
load("C:/Users/matto/OneDrive/Desktop/data science/Lab 4/us-states.csv")
View(USArrests)
View(OA.2.2...USArrests)
data <- read.csv("us-states.csv")
us.states <- read.csv("C:/Users/matto/OneDrive/Desktop/data science/Lab 4/us-states.csv")
View(us.states)
View(USArrests)
data <- read.csv("us-states.csv")
View(OA.2.2...USArrests)
View(OA.2.2...USArrests)
data <- read.csv("us-states.csv")
data
data <- read.csv("us-states.csv")
data
data <- read.csv("us-states.csv")
data
setwd("C:/Users/matto/OneDrive/Desktop/Data science project")
# Loading libraries
library(dplyr)
library(ggplot2)
library(corrplot)
library(tidyr)
library(readr)
library(stringr)
# Load the dataset
data <- read_csv("cleaned_train_data.csv")
#Replace NAs in numeric columns with mean and in categorical with mode
replace_na_number <- function(x) {
if (is.numeric(x)) x[is.na(x)] <- mean(x, na.rm = TRUE)
return(x)
}
replace_na_categorical <- function(x) {
if (is.factor(x)) {
mode_value <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_value
}
return(x)
}
data <- data %>%
mutate(across(where(is.numeric), replace_na_number)) %>%
mutate(across(where(is.factor), replace_na_categorical))
# Load the dataset
data <- read_csv("cleaned_train_data.csv")
# Load the dataset
data <- read_csv("train.csv")
# Data Cleaning
# Converting character columns to factors
data <- data %>%
mutate(across(where(is.character), as.factor))
#Replace NAs in numeric columns with mean and in categorical with mode
replace_na_number <- function(x) {
if (is.numeric(x)) x[is.na(x)] <- mean(x, na.rm = TRUE)
return(x)
}
replace_na_categorical <- function(x) {
if (is.factor(x)) {
mode_value <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_value
}
return(x)
}
data <- data %>%
mutate(across(where(is.numeric), replace_na_number)) %>%
mutate(across(where(is.factor), replace_na_categorical))
data <- data %>%
filter(between(price, quantile(price, 0.05), quantile(price, 0.95)),
between(milage, quantile(milage, 0.05), quantile(milage, 0.95))) %>%
mutate(price = ifelse(abs(scale(price)) > 3, mean(price, na.rm = TRUE), price),
milage = ifelse(abs(scale(milage)) > 3, mean(milage, na.rm = TRUE), milage))
# Box Plots
ggplot(data, aes(x = reorder(brand, price, median), y = price)) +
geom_boxplot(fill = "lightblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplot of Car Prices by Brand (Filtered)", x = "Brand", y = "Price")
ggplot(data, aes(x = fuel_type, y = price)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Boxplot of Car Prices by Fuel Type (Filtered)", x = "Fuel Type", y = "Price")
ggplot(data, aes(x = transmission, y = price)) +
geom_boxplot(fill = "lightpink") +
labs(title = "Boxplot of Car Prices by Transmission (Filtered)", x = "Transmission", y = "Price")
# Box Plots
ggplot(data, aes(x = reorder(brand, price, median), y = price)) +
geom_boxplot(fill = "lightblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplot of Car Prices by Brand (Filtered)", x = "Brand", y = "Price")
#histograms
#Histogram for 'price'
ggplot(data, aes(x = price)) +
geom_histogram(bins = 50, fill = "skyblue", color = "black") +
labs(title = "Distribution of Car Prices", x = "Count", y = "Price")
#Histogram for 'milage'
ggplot(data, aes(x = milage)) +
geom_histogram(bins = 50, fill = "lightgreen", color = "black") +
labs(title = "Distribution of Mileage", x = "Mileage", y = "Count")
#Histogram for 'model_year'
ggplot(data, aes(x = model_year)) +
geom_histogram(bins = 30, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Model Year", x = "Model Year", y = "Count")
#Count plot for 'brand'
ggplot(data, aes(x = reorder(brand, brand, function(x) -length(x)))) +
geom_bar(fill = "steelblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Count of Cars by Brand", x = "Brand", y = "Count")
#Count plot of 'fuel_type'
ggplot(data, aes(x = fuel_type)) +
geom_bar(fill = "purple") +
labs(title = "Count of Cars by Fuel Type", x = "Fuel Type", y = "Count")
#Count plot of 'accident' status
ggplot(data, aes(x = accident)) +
geom_bar(fill = "orange") +
labs(title = "Accident Reported Status", x = "Accident", y = "Count")
#Count plot of 'clean_title'
ggplot(data, aes(x = clean_title)) +
geom_bar(fill = "brown") +
labs(title = "Clean Title Status", x = "Clean Title", y = "Count")
#writing the cleaned up data to a new csv
write.csv('cleaned_data.csv')
# Load necessary libraries
library(dplyr)
library(tidyr)
# Read the dataset
data <- read.csv("train.csv")
# Step 1: Handle missing values
data <- data %>%
mutate(
fuel_type = ifelse(is.na(fuel_type), "Unknown", fuel_type),
accident = ifelse(is.na(accident), "Unknown", accident),
clean_title = ifelse(is.na(clean_title), "No", clean_title)
)
# Step 2: Split the engine column into horsepower and engine size/type
data <- data %>%
separate(engine, into = c("horsepower", "engine_specs"), sep = " ", extra = "merge") %>%
mutate(
horsepower = as.numeric(gsub("HP", "", horsepower)),
engine_specs = trimws(engine_specs)
)
# Step 3: Standardize categorical columns
data <- data %>%
mutate(
transmission = ifelse(grepl("A/T", transmission), "Automatic", transmission),
ext_col = tolower(ext_col),
int_col = tolower(int_col)
)
# View cleaned data
head(data)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Read the dataset
data <- read.csv("train.csv")
# Step 1: Handle missing values
data <- data %>%
mutate(
fuel_type = ifelse(is.na(fuel_type), "Unknown", fuel_type),
accident = ifelse(is.na(accident), "Unknown", accident),
clean_title = ifelse(is.na(clean_title), "No", clean_title)
)
# Step 2: Split the engine column into horsepower and engine size/type
data <- data %>%
separate(engine, into = c("horsepower", "engine_specs"), sep = " ", extra = "merge") %>%
mutate(
horsepower = as.numeric(gsub("HP", "", horsepower)),
engine_specs = trimws(engine_specs)
)
# Step 3: Standardize categorical columns
data <- data %>%
mutate(
transmission = ifelse(grepl("A/T", transmission), "Automatic", transmission),
ext_col = tolower(ext_col),
int_col = tolower(int_col)
)
# Boxplot for 'price' to check the distribution and identify any outliers
ggplot(data, aes(y = price)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Boxplot of Vehicle Prices", y = "Price") +
theme_minimal()
# Boxplot for 'milage' to understand mileage distribution
ggplot(data, aes(y = milage)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Boxplot of Vehicle Mileage", y = "Mileage") +
theme_minimal()
# Boxplot for 'price' to check the distribution and identify any outliers
ggplot(data, aes(y = price)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Boxplot of Vehicle Prices", y = "Price") +
theme_minimal()
# Boxplot for 'milage' to understand mileage distribution
ggplot(data, aes(y = milage)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Boxplot of Vehicle Mileage", y = "Mileage") +
theme_minimal()
# Boxplot of horsepower (numeric data extracted from 'engine')
ggplot(data, aes(y = horsepower)) +
geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Horsepower", y = "Horsepower") +
theme_minimal()
# Bar plot for 'fuel_type' to visualize fuel type distribution
ggplot(data, aes(x = fuel_type)) +
geom_bar(fill = "purple") +
labs(title = "Fuel Type Distribution", x = "Fuel Type", y = "Count") +
theme_minimal()
# Bar plot for 'transmission' to see the distribution of transmission types
ggplot(data, aes(x = transmission)) +
geom_bar(fill = "blue") +
labs(title = "Transmission Type Distribution", x = "Transmission", y = "Count") +
theme_minimal()
# Scatter plot of 'price' vs. 'milage' to identify any relationship
ggplot(data, aes(x = milage, y = price)) +
geom_point(alpha = 0.5, color = "darkred") +
labs(title = "Price vs Mileage", x = "Mileage", y = "Price") +
theme_minimal()
# Scatter plot of 'horsepower' vs. 'price' to check correlation
ggplot(data, aes(x = horsepower, y = price)) +
geom_point(alpha = 0.5, color = "darkgreen") +
labs(title = "Price vs Horsepower", x = "Horsepower", y = "Price") +
theme_minimal()
# Load the dataset
data <- read_csv("train.csv")
# Data Cleaning
# Converting character columns to factors
data <- data %>%
mutate(across(where(is.character), as.factor))
#Replace NAs in numeric columns with mean and in categorical with mode
replace_na_number <- function(x) {
if (is.numeric(x)) x[is.na(x)] <- mean(x, na.rm = TRUE)
return(x)
}
replace_na_categorical <- function(x) {
if (is.factor(x)) {
mode_value <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_value
}
return(x)
}
data <- data %>%
mutate(across(where(is.numeric), replace_na_number)) %>%
mutate(across(where(is.factor), replace_na_categorical))
data <- data %>%
filter(between(price, quantile(price, 0.05), quantile(price, 0.95)),
between(milage, quantile(milage, 0.05), quantile(milage, 0.95))) %>%
mutate(price = ifelse(abs(scale(price)) > 3, mean(price, na.rm = TRUE), price),
milage = ifelse(abs(scale(milage)) > 3, mean(milage, na.rm = TRUE), milage))
# Function to remove outliers using IQR
remove_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x[x >= (qnt[1] - H) & x <= (qnt[2] + H)]
}
# Apply to 'price' and 'milage' columns
data <- data %>%
filter(price %in% remove_outliers(price), milage %in% remove_outliers(milage))
# Box Plots
ggplot(data, aes(x = reorder(brand, price, median), y = price)) +
geom_boxplot(fill = "lightblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplot of Car Prices by Brand (Filtered)", x = "Brand", y = "Price")
ggplot(data, aes(x = fuel_type, y = price)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Boxplot of Car Prices by Fuel Type (Filtered)", x = "Fuel Type", y = "Price")
ggplot(data, aes(x = transmission, y = price)) +
geom_boxplot(fill = "lightpink") +
labs(title = "Boxplot of Car Prices by Transmission (Filtered)", x = "Transmission", y = "Price")
View(remove_outliers)
#Count plot for 'brand'
ggplot(data, aes(x = reorder(brand, brand, function(x) -length(x)))) +
geom_bar(fill = "steelblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Count of Cars by Brand", x = "Brand", y = "Count")
#Count plot of 'fuel_type'
ggplot(data, aes(x = fuel_type)) +
geom_bar(fill = "purple") +
labs(title = "Count of Cars by Fuel Type", x = "Fuel Type", y = "Count")
#Count plot of 'accident' status
ggplot(data, aes(x = accident)) +
geom_bar(fill = "orange") +
labs(title = "Accident Reported Status", x = "Accident", y = "Count")
#Count plot of 'clean_title'
ggplot(data, aes(x = clean_title)) +
geom_bar(fill = "brown") +
labs(title = "Clean Title Status", x = "Clean Title", y = "Count")
#writing the cleaned up data to a new csv
write.csv('cleaned_data.csv')
